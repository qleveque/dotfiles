#!/usr/bin/zsh
# Base
setopt histignorealldups sharehistory
setopt +o nomatch
stty -ixon
HISTSIZE=1000
SAVEHIST=1000
HISTFILE=~/.zsh_history
PROMPT=$'\n%B%K{bold,white}%F{cyan}%S%T%s%f%k%b %B%F{blue}%3~%f%b %# '
export LANG=en_US.UTF-8
export SHELL='/usr/bin/zsh'
export EDITOR='/usr/bin/nvim'
export VISUAL=$EDITOR
export LESS='-irFRX'
source ~/.aliases

export PATH="$HOME/bin:$HOME/.cargo/bin:$PATH"

is_wsl(){
    return `grep -q Microsoft /proc/version`
}

# ZSH plugins
load_zsh_plugins(){
  # Zsh autosuggestions
  source ~/.zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.plugin.zsh
  ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=magenta'
  ZSH_AUTOSUGGEST_CLEAR_WIDGETS=(vi-cmd-mode)
  ZSH_AUTOSUGGEST_HISTORY_IGNORE="cd *"

  # Zsh highlighting
  source ~/.zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

  # Zsh vim mode
  MODE_INDICATOR=""
  KEYTIMEOUT=1
  source ~/.zsh/plugins/zsh-vim-mode/zsh-vim-mode.plugin.zsh
  setopt NO_prompt_subst
  VIM_MODE_TRACK_KEYMAP=no
  MODE_CURSOR_VIINS='green blinking bar'
  MODE_CURSOR_VICMD='green block'
  # Should be placed after
  bindkey '^[[Z' autosuggest-accept

  # Zsh system clipboard
  source ~/.zsh/plugins/zsh-system-clipboard/zsh-system-clipboard.zsh
  typeset -g ZSH_SYSTEM_CLIPBOARD_TMUX_SUPPORT='true'

  # Zsh fzf completion
  source ~/.zsh/plugins/fzf-tab/fzf-tab.zsh
}
load_zsh_plugins

# Run all program files
run(){
  local ext=${@:t:e}
  case "$ext" in
    asm) nasm -f elf64 "$@" && ld -s -o "$@:h"/a.out "$@:r".o && "$@:h"/a.out;;
    bash) bash "$@";;
    bat|cmd) cd "$@:h" && cmd.exe /C "$@:t";;
    c) gcc -o "$@:h"/a.out "$@" && "$@:h"/a.out;;
    cc|cpp) g++ -o "$@:h"/a.out "$@" && "$@:h"/a.out;;
    f90|f95|f03) gfortran -o "$@:h"/a.out "$@" && "$@:h"/a.out;;
    go) go run "$@";;
    hs) ghc "$@" && ./"$@:r";;
    html) open "$@";;
    java) javac "$@" && java -cp "$@:h" "$@:t:r";;
    jl) julia "$@";;
    js) node "$@";;
    kt) kotlinc "$@" -include-runtime -d "$@:h"/a.jar && java -jar "$@:h"/a.jar;;
    lua) lua "$@";;
    ps1) powershell.exe ".\\$@";;
    py) python3 "$@";;
    r) Rscript "$@";;
    rb) ruby "$@";;
    rs) rustc "$@" -o "$@:h"/a.out && "$@:h"/a.out;;
    scala) scalac "$@" && scala "$@:t:r";;
    sh) sh "$@";;
    ts) tsc "$@" && node "$@:r".js;;
    zsh) zsh "$@";;
    *) echo 'Nothing to do';;
  esac
}

# Unzip universal command
unzip() {
  ext=$1:t:e
  case "$ext" in
    zip) /usr/bin/unzip "$@";;
    gzip) gunzip "$@";;
    gz) tar -xvf "$@";;
    7z) 7z x "$@";;
    *) echo 'Nothing to do';;
  esac
}

# Open function
if is_wsl; then
  open(){
    if [[ -n "$@" ]] then
      /mnt/c/Windows/System32/cmd.exe /C start "" "$@"
    fi
  }
else
  open(){
    xdg-open $1 1>/dev/null 2>/dev/null &
  }
fi

# Pyqo
export PYQO_F_TARGET='cat ~/.config/pyqo/f.json | jq ".$1" | sed "s/\"//g"'
export PYQO_D_TARGET='cat ~/.config/pyqo/d.json | jq ".$1" | sed "s/\"//g"'
if is_wsl; then
  export PYQO_F_TARGET="wslpath \"\$($PYQO_F_TARGET)\""
  export PYQO_D_TARGET="wslpath \"\$($PYQO_D_TARGET)\""
fi
ef(){
  $EDITOR "$(eval $PYQO_F_TARGET)"
}
c(){
  cd "$(eval $PYQO_D_TARGET)"
}

# Theme
alter_color(){
  local COLOR="$1"
  local DELTA="$2"
  local components=()
  for i in 0 2 4; do
    local component=$((0x${COLOR:$i:2} + $DELTA))
    if [ $component -gt 255 ]; then
      component=255
    fi
    if [ $component -lt 0 ]; then
      component=0
    fi
    components+=($component)
  done
  printf "%02X%02X%02X\n" $components
}

compute_vim_bg(){
  local BG_COLOR="$1"
  local sum=0
  for i in 0 2 4; do
    sum=$((sum + 0x${BG_COLOR:$i:2}))
  done
  if [ $sum -gt $((255 * 3/2)) ]; then
    echo light
  else
    echo dark
  fi
}

theme(){
  local THEME="$1"
  local ALACRITTY_CONF="$HOME/dotfiles/alacritty/.config/alacritty/alacritty.yml"
  local VIM_STYLE="$HOME/dotfiles/vim/.vim/style.vim"
  local TMUX_CONF="$HOME/dotfiles/tmux/.tmux.conf"
  local BG_COLOR=$(rg --no-filename --multiline -N " *.*: *&$THEME\s*primary:\s*background: *'#(.*)'" $ALACRITTY_CONF -r '$1')
  local THEMES=($(rg --no-filename -N " *.*: *&(.*)" $ALACRITTY_CONF -r '$1'))

  # List themes if no or incorrect theme
  if [ -z "$THEME" ] || [ ! ${THEMES[(ie)$THEME]} -le ${#THEMES} ]; then
    echo $THEMES
    return
  fi

  # Computations
  local VIM_BG=$(compute_vim_bg $BG_COLOR)
  local delta=1
  if [ "$VIM_BG" = "light" ]; then
    delta=-1
  fi
  local LIGHT_BG=$(alter_color $BG_COLOR $((delta * 16)))
  local LIGHTER_BG=$(alter_color $BG_COLOR $((delta * 33)))
  local LIGHTEST_BG=$(alter_color $BG_COLOR $((delta * 65)))

  # Alacritty
  sed -i '$ d' "$ALACRITTY_CONF"
  echo "colors: *$THEME" >> "$ALACRITTY_CONF"

  # Vim
  sed -i '1,2 d' "$VIM_STYLE"
  sed -i "1iset bg=$VIM_BG" "$VIM_STYLE"
  sed -i "1ilet BG=\"#$BG_COLOR\"|let BG1=\"#$LIGHT_BG\"|let BG2=\"#$LIGHTER_BG\"|let BG3=\"#$LIGHTEST_BG\"" "$VIM_STYLE"

  # Tmux
  sed -i '1,3 d' "$TMUX_CONF"
  sed -i "1iBG=#$BG_COLOR" "$TMUX_CONF"
  sed -i "1iLIGHT_BG=#$LIGHT_BG" "$TMUX_CONF"
  sed -i "1iLIGHTEST_BG=#$LIGHTEST_BG" "$TMUX_CONF"
  tmux source "$TMUX_CONF"
}

# Vifm
zle-vifm-only-choose-dir()
{
  local dst=$(vifm -c :only --choose-dir - . < /dev/tty)
  if [ -z "$dst" ]; then
    echo 'Directory picking cancelled/failed'
    return 1
  fi
  cd "$dst"
  zle reset-prompt
  vim-mode-set-cursor-style viins
  return 0
}
zle -N zle-vifm-only-choose-dir
bindkey '^f' zle-vifm-only-choose-dir

# FZF
export FZF_DEFAULT_COMMAND='fdfind'
export FZF_CTRL_T_COMMAND='fdfind'
export FZF_ALT_C_COMMAND='fdfind --type d'
export FZF_DEFAULT_OPTS='--no-bold --ansi --height 40% --border'
source ~/.zsh/fzf_config.zsh

# Recent directories
export PREV_PWD="$PWD"
export DIR_HIST=~/.dirhist
precmd() {
  if [ "$PWD" != "$PREV_PWD" ]; then
    PREV_PWD="$PWD"
    touch $DIR_HIST
    sed -i "\#^$PWD\$#d" $DIR_HIST
    echo "$(cat $DIR_HIST | tail -49)\n$PWD" > $DIR_HIST
  fi
}
export FZF_CTRL_P_COMMAND='eval "tac ~/.dirhist | grep -v \"^$PWD\$\""'
zle-go-to-recent-directory() {
  cd "`eval $FZF_CTRL_P_COMMAND | fzf --no-sort --reverse`"
  zle reset-prompt
}
zle -N zle-go-to-recent-directory
bindkey '^P' zle-go-to-recent-directory

# Ctrl-V
function zle-clipboard-paste {
  if ((REGION_ACTIVE)); then
    zle kill-region
  fi
  LBUFFER+="$(xclip -selection clipboard -out)"
  zle autosuggest-clear
}
zle -N zle-clipboard-paste
bindkey '^V' zle-clipboard-paste

# Cht
export cht(){
  local language=$1
  shift
  open "https://stackoverflow.com/search?q=[$language]${(j:+:)@}"
}

# Exit
zle-exit-zsh() { exit }
zle -N zle-exit-zsh
bindkey '^Q' zle-exit-zsh
bindkey -M vicmd '^Q' zle-exit-zsh

# Windows
if is_wsl; then
  export DISPLAY=:0.0
  cmd(){
    cmd.exe /C $@
  }
  for filename in ~/bin/*.bat; do
    alias "${filename:t:r}=cmd.exe /C %USERPROFILE%/bin/${filename:t:r}.bat"
  done
fi
