#!/usr/bin/zsh
# Base
setopt histignorealldups sharehistory
setopt +o nomatch
stty -ixon
HISTSIZE=1000
SAVEHIST=1000
HISTFILE=~/.zsh_history
PROMPT=$'\n%B%K{bold,white}%F{cyan}%S%n@%M%s%f%k%b %B%F{blue}%3~%f%b %# '
export LANG=en_US.UTF-8
export SHELL='/usr/bin/zsh'
export EDITOR='/usr/bin/nvim'
export VISUAL=$EDITOR
export LESS='-irFRX'
export PATH="$HOME/bin:$HOME/.local/bin:$PATH"

source ~/.aliases
source ~/.colors

local is_wsl() {
    return `grep -q Microsoft /proc/version`
}
local reset-prompt() {
  zle reset-prompt
  zle autosuggest-clear
  zle zle-line-init
}

# Change cursor shape for different vi modes.
KEYTIMEOUT=1
bindkey -v
function zle-keymap-select {
  if [[ ${KEYMAP} == vicmd ]] || [[ $1 = 'block' ]]; then
    echo -ne '\e[1 q'
  elif [[ ${KEYMAP} == main ]] || [[ ${KEYMAP} == viins ]] ||
       [[ ${KEYMAP} = '' ]] || [[ $1 = 'beam' ]]; then
    echo -ne '\e[5 q'
  fi
}
zle -N zle-keymap-select
zle-line-init() {
    zle -K viins
    echo -ne "\e[5 q"
}
zle -N zle-line-init
echo -ne '\e[5 q'
preexec() { echo -ne '\e[5 q' ;}

# ZSH plugins
load_zsh_plugins() {
  # Zsh autosuggestions
  source ~/.zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.plugin.zsh
  ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=$LIGHTEST_BG"
  ZSH_AUTOSUGGEST_CLEAR_WIDGETS=(vi-cmd-mode accept-line push-line-or-edit)
  ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=40
  bindkey '^[[Z' forward-word

  # Zsh highlighting
  source ~/.zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

  # Zsh system clipboard
  source ~/.zsh/plugins/zsh-system-clipboard/zsh-system-clipboard.zsh

  # Zsh fzf completion
  source ~/.zsh/plugins/fzf-tab/fzf-tab.zsh

  # Jump
  source ~/.zsh/plugins/zshmarks/zshmarks.plugin.zsh
  export JUMP_TARGET="cat $BOOKMARKS_FILE | rg \"\|\$1$\" | cut -d '|' -f1"
  _mark_expansion() {
    setopt localoptions extendedglob
    autoload -U modify-current-argument
    modify-current-argument '\"$(set $ARG && eval "$JUMP_TARGET")\"'
  }
  zle -N _mark_expansion
  bindkey '^G' _mark_expansion
}
load_zsh_plugins

# Run all program files
run() {
  local ext=${@:t:e}
  case "$ext" in
    asm) nasm -f elf64 "$@" && ld -s -o "$@:h"/a.out "$@:r".o && "$@:h"/a.out;;
    bash) bash "$@";;
    bat|cmd) cd "$@:h" && cmd.exe /C "$@:t";;
    c) gcc -o "$@:h"/a.out "$@" && "$@:h"/a.out;;
    cc|cpp) g++ -o "$@:h"/a.out "$@" && "$@:h"/a.out;;
    f90|f95|f03) gfortran -o "$@:h"/a.out "$@" && "$@:h"/a.out;;
    go) go run "$@";;
    hs) ghc "$@" && ./"$@:r";;
    html) o "$@";;
    java) javac "$@" && java -cp "$@:h" "$@:t:r";;
    jl) julia "$@";;
    js) node "$@";;
    kt) kotlinc "$@" -include-runtime -d "$@:h"/a.jar && java -jar "$@:h"/a.jar;;
    lua) lua "$@";;
    nsi) cd "$@:h" && cmd.exe /C "makensis $@:t && $@:t:r.exe";;
    ps1) powershell.exe ".\\$@";;
    py) python3 "$@";;
    r) Rscript "$@";;
    rb) ruby "$@";;
    rs) rustc "$@" -o "$@:h"/a.out && "$@:h"/a.out;;
    scala) scalac "$@" && scala "$@:t:r";;
    sh) sh "$@";;
    ts) tsc "$@" && node "$@:r".js;;
    zsh) zsh "$@";;
    *) cd "$@:h"; if [ -f Makefile ]; then make all; fi;;
  esac
}

# Unzip universal command
unzip() {
  ext=$1:t:e
  case "$ext" in
    zip) /usr/bin/unzip "$@";;
    gzip) gunzip "$@";;
    gz) tar -xvf "$@";;
    7z) 7z x "$@";;
    *) echo 'Nothing to do';;
  esac
}

# Open function
if is_wsl; then
  o() {
    if [[ -n "$@" ]] then
      /mnt/c/Windows/System32/cmd.exe /C start "" "$@"
    else
      /mnt/c/Windows/System32/cmd.exe /C start "" .
    fi
  }
else
  o() {
    if [[ -z "$1" ]] then
      set $PWD
    fi
    xdg-open $1 1>/dev/null 2>/dev/null &
  }
fi

# FZF
export FZF_DEFAULT_COMMAND='fdfind'
export FZF_CTRL_T_COMMAND='fdfind'
export FZF_ALT_C_COMMAND='fdfind --type d'
export FZF_DEFAULT_OPTS='--ansi --height 40% --border'
source /usr/share/doc/fzf/examples/completion.zsh
source /usr/share/doc/fzf/examples/key-bindings.zsh

# Vim-tmux-navigator
source ~/.vim/plugged/vim-tmux-navigator/vim-tmux-navigator.tmux

# Vifm
zle-vifm-only-choose-dir() {
  local dst=$(vifm -c :only --choose-dir - . < /dev/tty)
  if [ -z "$dst" ]; then
    echo 'Directory picking cancelled/failed'
    return 1
  fi
  cd "$dst"
  reset-prompt
  return 0
}
zle -N zle-vifm-only-choose-dir
bindkey '^f' zle-vifm-only-choose-dir

# Recent directories
export PREV_PWD="$PWD"
export DIR_HIST=~/.dirhist
precmd() {
  if [ "$PWD" != "$PREV_PWD" ]; then
    PREV_PWD="$PWD"
    touch $DIR_HIST
    sed -i "\#^$PWD\$#d" $DIR_HIST
    echo "$(cat $DIR_HIST | tail -299)\n$PWD" > $DIR_HIST
  fi
}
export FZF_P_COMMAND='eval "tac ~/.dirhist | grep -v \"^$PWD\$\""'
zle-recent-directory() {
  LBUFFER+="`eval $FZF_P_COMMAND | fzf --exact`"
  reset-prompt
}
zle -N zle-recent-directory
bindkey '^P' zle-recent-directory
zle-go-to-recent-directory() {
  cd "`eval $FZF_P_COMMAND | fzf --exact`"
  reset-prompt
}
zle -N zle-go-to-recent-directory
bindkey '\ep' zle-go-to-recent-directory

# Ctrl-V
zle-clipboard-paste() {
  LBUFFER+="$(xclip -selection clipboard -out)"
  reset-prompt
}
zle -N zle-clipboard-paste
bindkey '^V' zle-clipboard-paste

# Exit
zle-exit-zsh() { exit }
zle -N zle-exit-zsh
bindkey '^Q' zle-exit-zsh
bindkey -M vicmd '^Q' zle-exit-zsh

# Windows
if is_wsl; then
  export DISPLAY=:0.0
  cmd() {
    cmd.exe /C $@
  }
  for filename in ~/bin/*.bat; do
    if [ "${filename:t:r}" != "ls" ]; then
      alias "${filename:t:r}=cmd.exe /C %USERPROFILE%/bin/${filename:t:r}.bat"
    fi
  done
  for filename in ~/bin/*.ps1; do
    alias "${filename:t:r}=powershell.exe -c \~/bin/${filename:t:r}.ps1"
  done
fi
