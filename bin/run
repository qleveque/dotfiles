#!/usr/bin/zsh
# Run any program

pprint() { echo -n "\e[36m$1\e[0m" }

run() {
  local full_path=$1 file="${1:t}" name="${1:t:r}"
  if [ ! -f $full_path ]; then
    echo 'File does not exist'
    return
  fi
  cd ${full_path:h}

  # Scripts
  declare -A scripts=("Makefile" "make" "build" "./build" "setup" "./setup")
  while [[ $PWD != / ]]; do
    for script in "${(@k)scripts}"; do
      if [[ -f $script ]]; then
        pprint "[Running $PWD/$script]\n"
        ${scripts[$script]}
        return
      fi
    done
    cd ..
  done
  cd ${full_path:h}

  # Shebang
  local shebang=$(sed -n '1s/^#!//p' $file)
  if [[ -n $shebang ]]; then
    pprint "[Running #!$shebang]\n"
    eval "$shebang $file"
    return
  fi

  # Extension
  case ${1:t:e} in
    asm) nasm -f elf64 $file && ld -s -o $name.out $name.o && ./$name.out;;
    bash) bash $file;;
    bat|cmd) cmd.exe /C $file;;
    c) clang-17 -o $name.out $file && ./$name.out;;
    cc|cpp) clang++-17 -w -std=c++23 -o $name.out $file && ./$name.out;;
    cs) csc.exe -out:$name.out $file && ./$name.out;;
    f90|f95|f03) gfortran -o $name.out $file && ./$name.out;;
    go) go run $file;;
    groovy) groovy $file;;
    hs) ghc $file && ./$name;;
    html|md) o $file; exit;;
    java) javac $file && java $name;;
    jl) julia $file;;
    js|ts|mjs|tsx|jsx) bun run $file;;
    kt) kotlinc $file -include-runtime -d $name.jar && java -jar $name.jar;;
    lisp) clisp $name;;
    lua) lua $file;;
    m4) m4 -I $file > $name;;
    mod|aMod) voc $file -M && echo && ./$name;;
    nsi) cmd.exe /C "makensis $file && $name.exe";;
    pl) perl $file;;
    ps1) powershell.exe -ExecutionPolicy RemoteSigned -File $file;;
    py) python3 $file;;
    r) Rscript $file;;
    rb) ruby $file;;
    rs) rustc $file -o $name.out && ./$name.out;;
    scala) scala $file;;
    sh) sh $file;;
    sql) sqlite3 $name.db < $file;;
    tex) pdflatex -halt-on-error $file && o $name.pdf && exit;;
    zig) zig build-exe $file && ./$name;;
    zip|tar|rar|7z|xz|txz|bz2|tbz|tbz2|gz|tgz) zsh -ic "x \"$file\"";;
    zsh) zsh $file;;
    *) # Executable
      if [[ -x $file ]]; then
        ./$file
      else
        echo 'Nothing to do'
      fi;;
  esac
}

START=$(date +%s.%2N)
run "$(readlink -f "$*")"
RC=$?
ET=$(echo "$(date +%s.%2N) - $START" | bc)
pprint "[Returned $RC in $ET seconds]"
read
