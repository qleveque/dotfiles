#!/usr/bin/zsh
# Run any program

# Pause at the end if the '-p' flag is specified
[[ "$1" == "-p" ]] && PAUSE=true && shift

quit() {
  echo -n "$1"
  [[ ${PAUSE} == true ]] && read || echo
  exit 0
}

run() {
  echo "\e[36m[$*]\e[0m"
  local start=$(date +%s.%2N)
  eval $* $PARAMS
  local rc=$?
  local et=$(echo "$(date +%s.%2N) - ${start}" | bc)
  quit "\e[36m[Returned ${rc} in ${et} seconds]\e[0m"
}

error() {
  quit "\e[31m[$*]\e[0m"
}

full_path="$(readlink -f "$1")"
cd ${full_path:h}

# Scripts
while [[ ${PWD} != / ]]; do
  for script in build setup start run; do
    [[ -f ${script} && -x ${script} ]] && run ./${script}
  done
  [[ -f Makefile ]] && run make
  cd ..
done
cd ${full_path:h}

# File and params
[[ ! -f ${full_path} ]] && error 'File does not exist'
cd ${full_path:h}
file="${full_path:t}" name="${file:r}" ext="${file:e}"
shift
PARAMS="$@"

# Shebang
shebang=$(sed -n '1s/^#!//p' ${file})
[[ -n ${shebang} ]] && run "${shebang} ${file}"

# Extension
if [[ $name =~ ^[[:alnum:]]+$ ]]; then
  f="${file}" n="${name}"
else
  f="\"${file}\"" n="\"${name}\""
fi
case ${ext} in
  ahk) run cmd.exe /C "autohotkey.exe $f";;
  asm) run "nasm -f elf64 $f && ld -s -o $n.out $n.o && ./$n.out";;
  bash) run "bash $f";;
  bat|cmd) run cmd.exe /C "$f";;
  c) run "clang-17 -o $n.out $f && ./$n.out";;
  cc|cpp) run "clang++-17 -w -std=c++23 -o $n.out $f && ./$n.out";;
  cs) run "csc.exe -out:$n.out $f && ./$n.out";;
  f90|f95|f03) run "gfortran -o $n.out $f && ./$n.out";;
  go) run "go run $f";;
  groovy) run "groovy $f";;
  hs) run "ghc $f && ./$n";;
  html|md) run "o $f; exit";;
  java) run "javac $f && java $n";;
  jl) run "julia $f";;
  js|ts|mjs|tsx|jsx) run "bun run $f";;
  kt) run "kotlinc $f -include-runtime -d $n.jar && java -jar $n.jar";;
  lisp) run "clisp $n";;
  lua) run "lua $f";;
  m4) run "m4 -I $f > $n";;
  mod|aMod) run "voc $f -M && echo && ./$n";;
  nsi) run cmd.exe /C "makensis $f && $n.exe";;
  pl) run "perl $f";;
  ps1) run "powershell.exe -ExecutionPolicy RemoteSigned -f $f";;
  py) run "python3 $f";;
  r) run "Rscript $f";;
  rb) run "ruby $f";;
  rs) run "rustc $f -o $n.out && ./$n.out";;
  scala) run "scala $f";;
  sh) run "sh $f";;
  sql) run "sqlite3 $n.db < $f";;
  tex) run "pdflatex -halt-on-error $f && o $n.pdf && exit";;
  zig) run "zig build-exe $f && ./$n";;
  zip|tar|rar|7z|xz|txz|bz2|tbz|tbz2|gz|tgz|jar) run "extract $f";;
  zsh) run "zsh $f";;
esac

# Executable
[[ -x ${file} ]] && run "./$f"

# Not executable
error 'Nothing to do'
